generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["s_control", "s_auth", "s_quality"]
}

model SaUser {
  uid String @id @default(uuid())

  idUserAd String @unique @map("id_user_ad")
  name     String
  email    String @unique

  enable Boolean @default(true)

  paymentRequestsGeneral ScPaymentRequestsGeneral[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("sa_user")
  @@schema("s_auth")
}

model ScPaymentRequestsGeneral {
  uid String @id @default(uuid())

  supplier          String
  description       String?
  requiredReceipt   Boolean @default(false) @map("send_receipt")
  totalValue        Decimal @map("total_value")
  accountingAccount String? @map("accounting_account") @db.VarChar(255)

  user           SaUser             @relation(fields: [userCreatedUid], references: [uid])
  userCreatedUid String             @map("user_created_uid")
  cardHolder     ScCardHolders?     @relation(fields: [cardHoldersUid], references: [uid])
  cardHoldersUid String?            @map("card_holders_uid")
  apportionments ScApportionments[]

  createdAt            DateTime                 @default(now()) @map("created_at")
  updatedAt            DateTime                 @default(now()) @updatedAt @map("updated_at")
  paymentSchedule      ScPaymentSchedule[]
  paymentRequestsFiles ScPaymentRequestsFiles[]

  @@map("sc_payment_requests_general")
  @@schema("s_control")
}

model ScPaymentSchedule {
  uid String @id @default(uuid())

  paymentRequestUid         ScPaymentRequestsGeneral @relation(fields: [paymentRequestsGeneralUid], references: [uid])
  paymentRequestsGeneralUid String

  value   Float    @map("total_request_value")
  dueDate DateTime @map("due_date")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("sc_payments_schedule")
  @@schema("s_control")
}

model ScCategories {
  uid String @id @default(uuid())

  name   String  @db.VarChar(50)
  enable Boolean @default(true)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  products ScProducts[]

  @@map("sc_categories")
  @@schema("s_control")
}

model ScProducts {
  uid String @id @default(uuid())

  categoryId String
  category   ScCategories @relation(fields: [categoryId], references: [uid])

  code        Int     @default(autoincrement())
  name        String  @db.VarChar(50)
  enable      Boolean @default(true)
  description String?
  measurement String? @db.VarChar(50)
  quantity    Int?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("sc_products")
  @@schema("s_control")
}

model ScTempSuppliersData {
  uid String @id @default(uuid())

  name   String @db.VarChar(50)
  cnpj   String @unique @db.VarChar(20)
  source String @db.VarChar(30)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("sc_temp_suppliers_data")
  @@schema("s_control")
}

model ScFiles {
  uid String @id @default(uuid())

  name String @db.Text
  key  String @db.Text

  createdAt            DateTime                 @default(now()) @map("created_at")
  updatedAt            DateTime                 @default(now()) @updatedAt @map("updated_at")
  paymentRequestsFiles ScPaymentRequestsFiles[]

  @@map("sc_files")
  @@schema("s_control")
}

model ScPaymentRequestsFiles {
  uid String @id @default(uuid())

  filesUid                  String @map("file_uid")
  paymentRequestsGeneralUid String @map("payment_request_uid")

  fileUid           ScFiles                  @relation(fields: [filesUid], references: [uid])
  paymentRequestUid ScPaymentRequestsGeneral @relation(fields: [paymentRequestsGeneralUid], references: [uid])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("sc_payment_requests_files")
  @@schema("s_control")
}

model ScPaymentsForm {
  uid String @id @default(uuid())

  name   String  @db.VarChar(50)
  enable Boolean @default(true)

  cardHolders ScCardHolders[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("sc_payments_form")
  @@schema("s_control")
}

model ScCardHolders {
  uid String @id @default(uuid())

  paymentFormId String?         @map("payment_form_id")
  paymentForm   ScPaymentsForm? @relation(fields: [paymentFormId], references: [uid])

  code   Int
  name   String     @db.VarChar(50)
  type   ScCardType
  enable Boolean    @default(true)

  createdAt              DateTime                   @default(now()) @map("created_at")
  updatedAt              DateTime                   @default(now()) @updatedAt @map("updated_at")
  paymentRequestsGeneral ScPaymentRequestsGeneral[]

  @@map("sc_card_holders")
  @@schema("s_control")
}

enum ScCardType {
  credit
  corporate

  @@schema("s_control")
}

model ScApportionments {
  uid String @id @default(uuid())

  paymentRequestsGeneralUid String  @map("payment_requests_general_uid")
  costCenter                String  @map("cost_center")
  accountingAccount         String  @map("accounting_account")
  value                     Decimal

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  paymentRequestGeneralUid ScPaymentRequestsGeneral @relation(fields: [paymentRequestsGeneralUid], references: [uid])

  @@map("sc_apportionments")
  @@schema("s_control")
}
