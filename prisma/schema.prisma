// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// binaryTargets: 
// Specify the OS on which the Prisma Client will run to ensure compatibility of the query engine. 

// value => Build OS

// linux-musl-openssl-3.0.x => Linux Alpine v3.17 x86_x64 (Docker Container uses Alpine)
// darwin => macOS Intel x86 | darwin-arm64 => macOS ARM64
// windows => Windows
// debian-openssl-1.1.x => Ubuntu v18 - v20| Mint v19 - v20

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid String @id @default(uuid())

  idUserAd String @unique @map("id_user_ad")
  name     String
  email    String @unique

  enable Boolean @default(true)

  PaymentRequestsGeneral PaymentRequestsGeneral[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("user")
}

model PaymentRequestsGeneral {
  uid String @id @default(uuid())

  supplier        String
  description     String?
  requiredReceipt Boolean @default(false) @map("send_receipt")

  user           User             @relation(fields: [userCreatedUid], references: [uid])
  userCreatedUid String           @map("user_created_uid")
  Apportionments Apportionments[]

  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @default(now()) @updatedAt @map("updated_at")
  PaymentSchedule      PaymentSchedule[]
  PaymentRequestsFiles PaymentRequestsFiles[]

  @@map("payment_requests_general")
}

model PaymentSchedule {
  uid String @id @default(uuid())

  paymentRequestUid         PaymentRequestsGeneral @relation(fields: [paymentRequestsGeneralUid], references: [uid])
  paymentRequestsGeneralUid String

  value   Float    @map("total_request_value")
  dueDate DateTime @map("due_date")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("payments_schedule")
}

model Categories {
  uid String @id @default(uuid())

  name   String  @db.VarChar(50)
  enable Boolean @default(true)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  products Products[]

  @@map("categories")
}

model Products {
  uid String @id @default(uuid())

  categoryId String
  category   Categories @relation(fields: [categoryId], references: [uid])

  code        Int     @default(autoincrement())
  name        String  @db.VarChar(50)
  enable      Boolean @default(true)
  description String?
  measurement String? @db.VarChar(50)
  quantity    Int?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("products")
}

model TempSuppliersData {
  uid String @id @default(uuid())

  name   String @db.VarChar(50)
  cnpj   String @unique @db.VarChar(20)
  source String @db.VarChar(30)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("temp_suppliers_data")
}

model Files {
  uid String @id @default(uuid())

  name String @db.Text
  key  String @db.Text

  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @default(now()) @updatedAt @map("updated_at")
  PaymentRequestsFiles PaymentRequestsFiles[]

  @@map("files")
}

model PaymentRequestsFiles {
  uid String @id @default(uuid())

  filesUid                  String @map("file_uid")
  paymentRequestsGeneralUid String @map("payment_request_uid")

  fileUid           Files                  @relation(fields: [filesUid], references: [uid])
  paymentRequestUid PaymentRequestsGeneral @relation(fields: [paymentRequestsGeneralUid], references: [uid])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("payment_requests_files")
}

model PaymentsForm {
  uid String @id @default(uuid())

  name   String  @db.VarChar(50)
  enable Boolean @default(true)

  cardHolders CardHolders[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("payments_form")
}

model CardHolders {
  uid String @id @default(uuid())

  paymentFormId String?       @map("payment_form_id")
  paymentForm   PaymentsForm? @relation(fields: [paymentFormId], references: [uid])

  name   String   @db.VarChar(50)
  type   CardType
  enable Boolean  @default(true)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("card_holders")
}

enum CardType {
  credit
  corporate
}

model Apportionments {
  uid String @id @default(uuid())

  paymentRequestsGeneralUid String  @map("payment_requests_general_uid")
  costCenter                String  @map("cost_center")
  accountingAccount         String  @map("accounting_account")
  value                     Decimal

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  PaymentRequestGeneralUid PaymentRequestsGeneral @relation(fields: [paymentRequestsGeneralUid], references: [uid])

  @@map("apportionments")
}
